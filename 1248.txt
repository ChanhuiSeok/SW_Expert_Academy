#include <iostream>
#include <fstream>
#include <list>
#include <vector>

using namespace std;
int parent[10000];

int find(vector <vector<int>>& v, int idx) {
	int cnt = 1;

	if (v[idx].size() == 0)
		return 1;

	for (int i = 0; i < v[idx].size(); i++) {
		cnt = cnt + find(v, v[idx][i]);
	}

	return cnt;
}

int main() {

	int test_case, V, E, n1, n2, flag;
	int in0, in1, idx, output, c_parent;
	int count = 0;
	
	cin.tie(NULL);
	cout.tie(NULL);

	ifstream fp("input.txt");


	fp >> test_case;

	for (int T = 1; T <= 10; T++) {
		fp >> V; fp >> E; fp >> n1; fp >> n2;

		list <int> li;
		list <int>::iterator iter;
		vector <vector<int>> v(V+1);
		parent[1] = -1;

		for (int i = 0; i < E; i++) {
			fp >> in0; fp >> in1;
			parent[in1] = in0;
			v[in0].push_back(in1);
		}

		// queue에 n1의 부모들 목록 추가
		while (parent[n1] != -1) {
			n1 = parent[n1];
			li.push_back(n1);
		}
		flag = 0;
		// n1과 n2의 공통조상 찾기
		while (parent[n2] != -1 && flag != 1) {
			n2 = parent[n2];
			for (iter = li.begin(); iter != li.end(); iter++) {
				if (n2 == *iter) {
					c_parent = *iter;
					flag = 1;
					break;
				}
			}
		}
		//c_parent가 가장 가까운 조상
		//c_parent 노드의 자식 갯수 찾기
		count = find(v, c_parent);		
		cout << "#" << T << " " << c_parent << " " << count << "\n";

		count = 0;

	}

	

}